import json
import os
import re
from typing import Dict, Tuple, List
from dateutil.parser import parse
from langdetect import detect

# Input directory containing JSON files
json_dir_path = "/Users/shibai/Documents/TUE study materials/TUE 2024/JBG030 DBL Data/dbl_data_2025"
output_dir_path = os.path.join(json_dir_path, "../twitter_data_final")
os.makedirs(output_dir_path, exist_ok=True)

# List of airline company names
airline_names = [
    'KLM', 'AirFrance', 'British_Airways', 'AmericanAir', 'Lufthansa',
    'AirBerlin', 'AirBerlin assist', 'easyJet', 'RyanAir',
    'SingaporeAir', 'Qantas', 'EtihadAirways', 'VirginAtlantic'
]

# Configurations
CONFIG = {
    "WEIRD_CRITERIA": {
        "min_followers": 20,
        "max_age_days": 30,
        "score_threshold": 1.0
    },
    "min_text_length_for_langdetect": 30
}

AIRLINE_LANG_TOLERANCE = {
    "klm": "nl",
    "lufthansa": "de",
    "british_airways": "en",
    "airfrance": "fr"
}

def extract_relevant_info(tweet):
    urls = tweet.get('entities', {}).get('urls', [])
    cleaned_urls = [{'url': url.get('url'), 'display_url': url.get('display_url')} for url in urls]

    return {
        'created_at': tweet.get('created_at'),
        'id': tweet.get('id'),
        'text': tweet.get('text') or tweet.get('extended_tweet', {}).get('full_text'),
        'lang': tweet.get('lang'),
        'retweet_count': tweet.get('retweet_count'),
        'favorite_count': tweet.get('favorite_count'),
        'in_reply_to_status_id': tweet.get('in_reply_to_status_id'),
        'in_reply_to_user_id': tweet.get('in_reply_to_user_id'),
        'in_reply_to_screen_name': tweet.get('in_reply_to_screen_name'),
        'is_quote_status': tweet.get('is_quote_status'),
        'quote_count': tweet.get('quote_count'),
        'reply_count': tweet.get('reply_count'),
        'place': tweet.get('place'),
        'favorited': tweet.get('favorited'),
        'retweeted': tweet.get('retweeted'),
        'user': {
            'id': tweet.get('user', {}).get('id'),
            'screen_name': tweet.get('user', {}).get('screen_name'),
            'name': tweet.get('user', {}).get('name'),
            'followers_count': tweet.get('user', {}).get('followers_count'),
            'friends_count': tweet.get('user', {}).get('friends_count'),
            'favourites_count': tweet.get('user', {}).get('favourites_count'),
            'statuses_count': tweet.get('user', {}).get('statuses_count'),
            'verified': tweet.get('user', {}).get('verified'),
            'location': tweet.get('user', {}).get('location'),
            'time_zone': tweet.get('user', {}).get('time_zone'),
            'created_at': tweet.get('user', {}).get('created_at')
        },
        'entities': {
            'hashtags': tweet.get('entities', {}).get('hashtags'),
            'user_mentions': tweet.get('entities', {}).get('user_mentions'),
            'urls': cleaned_urls,
            'symbols': tweet.get('entities', {}).get('symbols'),
        }
    }

def contains_airline_name_or_is_quote_or_reply(tweet):
    text = tweet.get('text', None)
    is_quote = tweet.get('is_quote_status', False)
    is_reply = tweet.get('in_reply_to_status_id') is not None

    if text is not None:
        text = text.lower()
        contains_airline = any(airline.lower() in text for airline in airline_names)
    else:
        contains_airline = False

    return contains_airline or is_quote or is_reply

def is_weird_account(user: Dict, tweet_created_at: str, tweet: Dict) -> Tuple[bool, List[str]]:
    if not user or not tweet:
        return True, ["missing_user_info_or_tweet"]

    score, reasons = 0.0, []
    followers = user.get('followers_count', 0)
    friends = user.get('friends_count', 0)
    statuses = user.get('statuses_count', 0)
    screen_name = user.get('screen_name', '')
    verified = user.get('verified', False)
    description = user.get('description', '')
    profile_image = user.get('profile_image_url', '')

    if followers < CONFIG["WEIRD_CRITERIA"]['min_followers'] and statuses > 5000:
        score += 0.8
        reasons.append("low_followers_high_activity")
    if followers < CONFIG["WEIRD_CRITERIA"]['min_followers'] and friends > 500:
        score += 0.6 if not verified else 0.2
        reasons.append("spammy_follow_ratio")
    if statuses < 10:
        score += 0.5
        reasons.append("very_low_tweet_count")
    if not description:
        score += 0.5
        reasons.append("empty_profile_description")
    if profile_image and 'default_profile' in profile_image.lower():
        score += 0.5
        reasons.append("default_profile_image")
    if not verified:
        score += 0.2
        reasons.append("not_verified")

    created_at = user.get('created_at', '')
    if created_at and tweet_created_at:
        try:
            user_created = parse(created_at, fuzzy=False)
            tweet_created = parse(tweet_created_at, fuzzy=False)
            age_days = max((tweet_created - user_created).days, 1)
            if age_days < CONFIG["WEIRD_CRITERIA"]['max_age_days'] and statuses > 500 and followers < CONFIG["WEIRD_CRITERIA"]['min_followers']:
                score += 0.8
                reasons.append("new_active_no_followers")
            if statuses / age_days > 100:
                score += 0.8
                reasons.append("high_tweet_frequency")
        except (ValueError, TypeError):
            reasons.append("skipped_age_check_invalid_date")

    text = tweet.get('text', '').lower()
    tweet_lang = tweet.get('lang', '')
    if not tweet_lang or tweet_lang == 'und':
        if len(text) >= CONFIG["min_text_length_for_langdetect"]:
            try:
                tweet_lang = detect(text)
            except Exception:
                tweet_lang = ''

    for airline, lang_code in AIRLINE_LANG_TOLERANCE.items():
        if airline in text and tweet_lang == lang_code:
            score -= 0.2
            reasons.append(f"{airline}_native_lang_tolerance")

    score_threshold = CONFIG["WEIRD_CRITERIA"]['score_threshold']
    if 'lufthansa' in text or tweet_lang == 'de':
        score_threshold = 1
    if score >= score_threshold:
        reasons.append(f"score={score:.2f}")
        return True, reasons
    return False, []

# Main processing loop
for filename in os.listdir(json_dir_path):
    if filename.endswith('.json'):
        print(f"Processing file: {filename}")
        json_file_path = os.path.join(json_dir_path, filename)
        output_file_path = os.path.join(output_dir_path, f"cleaned_{filename}")
        cleaned_tweets = []

        with open(json_file_path, 'r', encoding='utf-8') as file:
            for line in file:
                try:
                    tweet = json.loads(line.strip())

                    if contains_airline_name_or_is_quote_or_reply(tweet):
                        cleaned_tweet = extract_relevant_info(tweet)
                        weird, reasons = is_weird_account(tweet.get('user', {}), tweet.get('created_at'), tweet)
                        cleaned_tweet['weird_account'] = weird
                        cleaned_tweet['weird_reasons'] = reasons if weird else []
                        cleaned_tweets.append(cleaned_tweet)

                except json.JSONDecodeError as e:
                    print(f"Skipping invalid JSON in {filename}: {e}")

        with open(output_file_path, 'w', encoding='utf-8') as output_file:
            json.dump(cleaned_tweets, output_file, ensure_ascii=False, indent=4)
